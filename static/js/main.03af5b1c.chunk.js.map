{"version":3,"sources":["form2.js","App.js","index.js"],"names":["options","key","value","flag","text","options1","options2","Forms","initialValues","brandname","partnumber","email","password","confirmPassword","validationSchema","Yup","shape","required","min","oneOf","onSubmit","fields","alert","JSON","stringify","render","errors","touched","status","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","Segment","stacked","padding","backgroundColor","color","Divider","class","htmlFor","Dropdown","placeholder","fluid","search","selection","marginTop","TextArea","minHeight","width","border","columns","Input","name","type","className","productname","component","Button","React","Component","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.03af5b1c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport {Divider, Dropdown, Grid,Segment, Input,TextArea,Button} from 'semantic-ui-react';\r\nimport * as Yup from 'yup';\r\nconst options=[ { key: 'dz', value: 'dz', flag: 'in', text: 'India' },\r\n{ key: 'ax', value: 'ax', flag: 'ax', text: 'Aland Islands' },\r\n{ key: 'al', value: 'al', flag: 'al', text: 'Albania' },]\r\n\r\nconst options1=[{ key: 'dz', value: 'dz', text: 'XYZ' },\r\n{ key: 'ax', value: 'ax', text: 'ABC' }]\r\nconst options2=[{value:'ax' ,text:'123'} ,{value:'bx',text:'124'},{value:'cd',text:'125'},{value:'re' ,text:'126'}]\r\nclass Forms extends React.Component{\r\n    render() {\r\n        return (\r\n    <Formik\r\n                initialValues={{\r\n                    brandname: '',\r\n                    partnumber: '',\r\n                    email: '',\r\n                    password: '',\r\n                    confirmPassword: ''\r\n                }}\r\n                validationSchema={Yup.object().shape({\r\n                    brandname: Yup.string()\r\n                        .required('Brand Name is required'),\r\n                    partnumber: Yup.string()\r\n                        .required('Product Name is required'),\r\n                    email: Yup.string()\r\n                        .email('Email is invalid')\r\n                        .required('Email is required'),\r\n                    password: Yup.string()\r\n                        .min(6, 'Password must be at least 6 characters')\r\n                        .required('Password is required'),\r\n                    confirmPassword: Yup.string()\r\n                        .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n                        .required('Confirm Password is required')\r\n                })}\r\n                onSubmit={fields => {\r\n                    alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(fields, null, 4))\r\n                }}\r\n        render={({ errors, status, touched }) => (\r\n        <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n            <Grid.Column style={{ maxWidth: 500}}>\r\n            <Segment stacked style={{padding: 2 ,backgroundColor:'#f8f8f8'}}>\r\n               <h2 style={{color:'brown'}}>Add Update Inventory!!</h2>\r\n               <Divider/>\r\n               <Form style={{textAlign:'left'}}>\r\n                <div class=\"form\" style={{padding:10}}>\r\n                <label htmlFor=\"location\">Location</label>\r\n                <div>\r\n                    <Dropdown placeholder='Select Country' fluid search selection options={options}></Dropdown>\r\n                </div>\r\n                <div style={{marginTop:10}}>\r\n                <label htmlFor=\"brandname\">Brand Name</label>\r\n                <Dropdown placeholder='..' fluid search selection options={options1}></Dropdown>\r\n                </div>\r\n                \r\n                <div style={{marginTop:10}}>\r\n                <label htmlFor=\"partnumber\">Part Number</label>\r\n                <Dropdown placeholder='..' fluid search selection options={options2}></Dropdown>\r\n                </div>\r\n                \r\n                <div style={{marginTop:10}}>\r\n                <label htmlFor=\"Description\">Description</label>\r\n                <TextArea placeholder=\"Enter..\" style={{ minHeight: 70,width:445,border:'solid grey 1px' }}/>\r\n                </div>\r\n                <div class='triad' style={{marginTop:10}}>\r\n                <Grid columns={3}>\r\n                <Grid.Column>\r\n                <label htmlFor=\"productname\">Quantity</label>\r\n                <div>\r\n                    <Input fluid><Field name=\"productname\" type=\"text\" className={'form-control' + (errors.productname && touched.productname ? ' is-invalid' : '')} /></Input>\r\n                    <ErrorMessage name=\"productname\" component=\"div\" className=\"invalid-feedback\" />\r\n                </div>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                <label htmlFor=\"productname\">Min SP(Per Unit)</label>\r\n                <div>\r\n                    <Input fluid><Field name=\"productname\" type=\"text\" className={'form-control' + (errors.productname && touched.productname ? ' is-invalid' : '')} /></Input>\r\n                    <ErrorMessage name=\"productname\" component=\"div\" className=\"invalid-feedback\" />\r\n                </div>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                <label htmlFor=\"productname\">Expiry</label>\r\n                <div>\r\n                    <Input fluid><Field name=\"productname\" type=\"text\" className={'form-control' + (errors.productname && touched.productname ? ' is-invalid' : '')} /></Input>\r\n                    <ErrorMessage name=\"productname\" component=\"div\" className=\"invalid-feedback\" />\r\n                </div>\r\n                </Grid.Column>\r\n                </Grid>\r\n                </div>\r\n\r\n                <div style={{marginTop:10}}>\r\n                <label htmlFor=\"productname\">Upload File</label>\r\n                    <Input fluid><Field name=\"productname\" type=\"text\" className={'form-control' + (errors.productname && touched.productname ? ' is-invalid' : '')} /><Button>Browse</Button></Input>\r\n                    <ErrorMessage name=\"productname\" component=\"div\" className=\"invalid-feedback\" />\r\n                </div>\r\n\r\n                \r\n                <div style={{marginTop:10}}>\r\n                <label htmlFor=\"productname\">Upload Product Picture</label>\r\n                    <Input fluid><Field name=\"productname\" type=\"text\" className={'form-control' + (errors.productname && touched.productname ? ' is-invalid' : '')} /><Button>Browse</Button></Input>\r\n                    <ErrorMessage name=\"productname\" component=\"div\" className=\"invalid-feedback\" />\r\n                </div>\r\n                </div>\r\n               </Form>\r\n            </Segment>\r\n            </Grid.Column>\r\n        </Grid>     \r\n        )}\r\n    />\r\n    )\r\n  }\r\n}\r\n\r\nexport default Forms;","import Forms from \"./form2.js\";\n\nfunction App() {\n  return (\n    <Forms/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'semantic-ui-css/semantic.min.css';\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}